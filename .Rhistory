hc_yAxis(title = list(text = "Spectral Distance From the Disconnected Hypergraph")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
summarise(spectral_distances$primal)
summarise(spectral_distances$primal$mm$mm)
summary(spectral_distances$primal)
summary(spectral_distances$primal$mm$mm)
summary(spectral_distances$primal$mm$mm[[1]][[1]])
summary(unlist(spectral_distances$primal))
summary(unlist(spectral_distances$primal$mm$mm))
head(sd.p.long)
sd.p.long$Type <- paste0(sd.p.long$Var1, "-", sd.p.long$Var2)
sd.p.long %>% hchart("boxplot", hcaes(x = value))
sd.p.long %>% hchart("boxplot", hcaes(x = value, group = Type))
hcboxplot(x = sd.p.long$value)
data_to_boxplot(x = sd.p.long$value)
data_to_boxplot(x = value, data = sd.p.long)
?data_to_boxplot
data_to_boxplot(variable = value, data = sd.p.long)
data_to_boxplot(variable = value, data = sd.p.long, group_var = Var1, group_var2 = Var2)
data_to_boxplot(variable = value, data = sd.p.long, group_var = Var1, group_var2 = Var2) %>% hchart("boxplot")
hcboxplot(x = sd.p.long$value)
hcboxplot(x = sd.p.long$value, var = Var1)
hcboxplot(x = sd.p.long$value, var = sd.p.long$Var1)
sd.p.long$Type <- rep(c("Mouse/Mouse", "Mouse/Human", "Human/Mouse", "Human/Human"), each = 9, 36)
sd.p.long$Type <- paste0(sd.p.long$Type, rep(c("Mouse/Mouse", "Mouse/Human", "Human/Mouse", "Human/Human"), each = 324))
sd.p.long
sd.p.long$Type <- rep(c("Mouse/Mouse", "Mouse/Human", "Human/Mouse", "Human/Human"), each = 9, 36)
sd.p.long$Type <- paste0(sd.p.long$Type, rep(c("Mouse/Mouse","-", "Mouse/Human", "Human/Mouse", "Human/Human"), each = 324))
sd.p.long$Type <- paste0(sd.p.long$Type,"-", rep(c("Mouse/Mouse", "Mouse/Human", "Human/Mouse", "Human/Human"), each = 324))
sd.p.long
hcboxplot(x = sd.p.long$value, var = sd.p.long$Type)
library(flexdashboard)
library(highcharter)
library(reshape2)
library(dplyr)
library(broom)
sd.d.long <- melt(sd.d)
x <- c("Model X:", "Model Y:", "Spectral Distance:")
y <- sprintf("{point.%s:.2f}", c("Var1", "Var2", "value"))
tltip <- tooltip_table(x,y)
sd.d.long %>%
hchart("heatmap", hcaes(x = Var1, y = Var2, value = value)) %>%
hc_xAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_yAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
sd.d.long <- melt(sd.d)
x <- c("Model X:", "Model Y:", "Spectral Distance:")
y <- sprintf("{point.%s:.2f}", c("Var1", "Var2", "value"))
tltip <- tooltip_table(x,y)
sd.d.long %>%
hchart("heatmap", hcaes(x = Var1, y = Var2, value = value)) %>%
hc_colorAxis(minColor = "green", maxColor = "red") %>%
hc_xAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_yAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
sd.d.long <- melt(sd.d)
x <- c("Model X:", "Model Y:", "Spectral Distance:")
y <- sprintf("{point.%s:.2f}", c("Var1", "Var2", "value"))
tltip <- tooltip_table(x,y)
sd.d.long %>%
hchart("heatmap", hcaes(x = Var1, y = Var2, value = value)) %>%
hc_colorAxis(minColor = "lime", maxColor = "red") %>%
hc_xAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_yAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
sd.d.long <- melt(sd.d)
x <- c("Model X:", "Model Y:", "Spectral Distance:")
y <- sprintf("{point.%s:.2f}", c("Var1", "Var2", "value"))
tltip <- tooltip_table(x,y)
sd.d.long %>%
hchart("heatmap", hcaes(x = Var1, y = Var2, value = value)) %>%
hc_colorAxis(minColor = "lime", maxColor = "red") %>%
hc_xAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_yAxis(title = list(text = "Dual Classification Hypergraph")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
library(d3heatmap)
install.packages("d3heatmap")
devtools::install_github("rstudio/d3heatmap")
library(d3heatmap)
d3heatmap(sd.p)
?d3heatma
?d3heatmap
library(flexdashboard)
library(highcharter)
library(reshape2)
library(dplyr)
library(broom)
library(d3heatmap)
d3heatmap(sd.d, symm = TRUE, colors = c("green", "red"))
summary(conf_mat$mm[[1]][[1]])
conf_mat$mm[[1]][[1]]
install.packages("printr")
conf_mat$mm[[1]][[1]]
conf_mat$mm[[1]][[1]]$overall
conf_mat$mm[[1]][[1]]$overall[-7]
as.table(conf_mat$mm[[1]][[1]]$overall[-7])
hcboxplot(sd.d.long)
hcboxplot(sd.d)
hcboxplot(sd.d.long)
hcboxplot(sd.d.long$value)
hcboxplot(sd.d.long$value, var = sd.d.long$Var1)
library(ggplot2)
summary(sd.d.long)
head(sd.d.long)
head(sd.d.long, 20)
library(umap)
eigenvalues
unlist(eigenvalues$mouse_mouse$primal)
ev.p <- c(unlist(eigenvalues$[[1]]$primal), unlist(eigenvalues$[[2]]$primal), unlist(eigenvalues$[[3]]$primal), unlist(eigenvalues$[[4]]$primal))
ev.p <- c(unlist(eigenvalues[[1]]$primal), unlist(eigenvalues[[2]]$primal), unlist(eigenvalues[[3]]$primal), unlist(eigenvalues[[4]]$primal))
ev.p <- as.matrix(ev.p, byrow = TRUE, ncol = 11)
head(ev.p)
ev.p[1:5,1:5]
ev.p <- matrix(ev.p, byrow = TRUE, ncol = 11)
ev.p[1:5,1:5]
ev.p[1:5,1:11]
ev.p <- as.data.frame(ev.p)
ev.p
library(umap)
p.umap <- umap(ev.p)
primal.data <- data.frame(Hypergraph = id, UMAP1 = p.umap$layout[,1], UMAP2 = p.umap$layout[,2])
ggplot(primal.data, aes(UMAP1, UMAP2)) + geom_point()
head(sd.p.long)
head(p.data)
head(primal.data)
primal.data <- primal.data[,-1]
head(primal.data)
primal.data$Test <- p.data$test
primal.data$Train <- p.data$train
p.data$train
p.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2))
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2))
primal.data$trainspec <- p.data$trainspec
primal.data$testspec <- p.data$testspec
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2, group = trainspec)) %>% hc_colors(c("blue", "red"))
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>% hc_colors(c("blue", "red"))
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2, group = trainspec)) %>% hc_colors(c("blue", "red"))
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>% hc_colors(c("blue", "red"))
library(flexdashboard)
library(highcharter)
library(reshape2)
library(dplyr)
library(broom)
library(d3heatmap)
library(printr)
d3heatmap(sd.p, symm = TRUE, colors = c("green", "red"))
primal.data %>% hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>% hc_colors(c("blue", "red"))
x <- c("Trained On:", "Tested On:")
y <- sprintf("{point.%s:.2f}", c("Train", "Test"))
tltip <- tooltip_table(x,y)
primal.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
primal.data
save(primal.data, file = "/Users/hugh/Documents/University/Maths/Year4/Project/RCode/MachineLearningCode/Data/PrimalData.RData")
head(primal.data)
dual.data <- primal.data[,3:6]
dual.data <- rbind(dual.data, data.frame(Test = "1-Vector", Train = "1-Vector", trainspec = "1-Vector", testspec = "1-Vector"))
dual.data
ev <- c(unlist(eigenvalues[[1]]$dual), unlist(eigenvalues[[2]]$dual), unlist(eigenvalues[[3]]$dual), unlist(eigenvalues[[4]]$dual))
ev <- matrix(ev, byrow = TRUE, ncol = 11)
ev
ev <- c(unlist(eigenvalues[[1]]$dual), unlist(eigenvalues[[2]]$dual), unlist(eigenvalues[[3]]$dual), unlist(eigenvalues[[4]]$dual), rep(0, 11))
ev <- matrix(ev, byrow = TRUE, ncol = 11)
ev
dumap <- umap(ev)
dual.data$UMAP1 <- dumap$layout[,1]
dual.data$UMAP2 <- dumap$layout[,2]
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("black", blue", "red")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dumap <- umap(ev)
dual.data$UMAP1 <- dumap$layout[,1]
dual.data$UMAP2 <- dumap$layout[,2]
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = trainspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = trainspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = testspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data$Interspec <- FALSE
dual.data$Interspec[which(dual.data$trainspec == dual.data$testspec)] <- TRUE
dual.data$Interspec
dual.data$Interspec[which(dual.data$Interspec == TRUE)] <- "Interspecies"
dual.data$Interspec[which(dual.data$Interspec != TRUE)] <- "Intraspecies"
dual.data$Interspec[37] <- "1-Vector"
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = Interspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data$Interspec <- (dual.data$trainspec == dual.data$testspec)
dual.data$Interspec[37] <- "1-Vector"
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = Interspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data$Interspec[which(dual.data$Interspec == TRUE)] <- "Intraspecies"
dual.data$Interspec[which(dual.data$Interspec == FALSE)] <- "Interspecies"
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = Interspec)) %>%
hc_colors(c("blue", "red", "black")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = Interspec)) %>%
hc_colors(c("black", "blue", "red")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
dual.data %>%
hchart("point", hcaes(x = UMAP1, y = UMAP2, group = Interspec)) %>%
hc_colors(c("black", "red", "blue")) %>%
hc_xAxis(title = list(text = "UMAP 1")) %>%
hc_yAxis(title = list(text = "UMAP 2")) %>%
hc_tooltip(useHTML = TRUE, headerFormat = "", pointFormat = tltip)
save(dual.data, file = "/Users/hugh/Documents/University/Maths/Year4/Project/RCode/MachineLearningCode/Data/DualData.RData")
install.packages("DT")
?includeurl
?include_url
install.packages("summarytools")
install.packages("datatable")
install.packages("data.table")
knitr::opts_chunk$set(echo = TRUE)
train_ind <- list(mouse = list(), human = list())
train_ind$mouse[[1]] <- stratified(data.frame(index = 1:nrow(x.mouse$spec1), identity = y.mouse[which(specimen.mouse == "M1")]), group = 2, size = 0.8)$index
knitr::opts_chunk$set(echo = TRUE)
library(keras)
library(splitstackshape)
setwd("/Users/hugh/Documents/University/Maths/Year4/Project/RCode/MachineLearningCode/Demo")
load("Data/MouseFeatures")
load("Data/HumanFeatures")
load("Data/MouseIdentity")
load("Data/HumanIdentity")
load("Data/MouseSpecimen")
load("Data/HumanSpecimen")
x.mouse <- list(spec1 = x.mouse[which(specimen.mouse == "M1"),], spec2 = x.mouse[which(specimen.mouse == "M2"),], spec3 = x.mouse[which(specimen.mouse == "M3"),], full = x.mouse)
x.human <- list(spec1 = x.human[which(specimen.human == "H1"),], spec2 = x.human[which(specimen.human == "H2"),], spec3 = x.human[which(specimen.human == "H3"),], full = x.human)
train_ind <- list(mouse = list(), human = list())
train_ind$mouse[[1]] <- stratified(data.frame(index = 1:nrow(x.mouse$spec1), identity = y.mouse[which(specimen.mouse == "M1")]), group = 2, size = 0.8)$index
train_ind$mouse[[2]] <- stratified(data.frame(index = 1:nrow(x.mouse$spec2), identity = y.mouse[which(specimen.mouse == "M2")]), group = 2, size = 0.8)$index
train_ind$mouse[[3]] <- stratified(data.frame(index = 1:nrow(x.mouse$spec3), identity = y.mouse[which(specimen.mouse == "M3")]), group = 2, size = 0.8)$index
train_ind$human[[1]] <- stratified(data.frame(index = 1:nrow(x.human$spec1), identity = y.human[which(specimen.human == "H1")]), group = 2, size = 0.8)$index
train_ind$human[[2]] <- stratified(data.frame(index = 1:nrow(x.human$spec2), identity = y.human[which(specimen.human == "H2")]), group = 2, size = 0.8)$index
train_ind$human[[3]] <- stratified(data.frame(index = 1:nrow(x.human$spec3), identity = y.human[which(specimen.human == "H3")]), group = 2, size = 0.8)$index
x.mouse$spec1 <- list(train = x.mouse$spec1[train_ind$mouse[[1]],], test = x.mouse$spec1[-train_ind$mouse[[1]],])
x.mouse$spec2 <- list(train = x.mouse$spec2[train_ind$mouse[[2]],], test = x.mouse$spec2[-train_ind$mouse[[2]],])
x.mouse$spec3 <- list(train = x.mouse$spec3[train_ind$mouse[[3]],], test = x.mouse$spec3[-train_ind$mouse[[3]],])
x.human$spec1 <- list(train = x.human$spec1[train_ind$human[[1]],], test = x.human$spec1[-train_ind$human[[1]],])
x.human$spec2 <- list(train = x.human$spec2[train_ind$human[[2]],], test = x.human$spec2[-train_ind$human[[2]],])
x.human$spec3 <- list(train = x.human$spec3[train_ind$human[[3]],], test = x.human$spec3[-train_ind$human[[3]],])
y.mouse.class <- list(spec1 = y.mouse[which(specimen.mouse == "M1")], spec2 = y.mouse[which(specimen.mouse == "M2")], spec3 = y.mouse[which(specimen.mouse == "M3")], full = y.mouse)
y.human.class <- list(spec1 = y.human[which(specimen.human == "H1")], spec2 = y.human[which(specimen.human == "H2")], spec3 = y.human[which(specimen.human == "H3")], full = y.human)
y.mouse.class$spec1 <- list(train = y.mouse.class$spec1[train_ind$mouse[[1]]], test = y.mouse.class$spec1[-train_ind$mouse[[1]]])
y.mouse.class$spec2 <- list(train = y.mouse.class$spec2[train_ind$mouse[[2]]], test = y.mouse.class$spec2[-train_ind$mouse[[2]]])
y.mouse.class$spec3 <- list(train = y.mouse.class$spec3[train_ind$mouse[[3]]], test = y.mouse.class$spec3[-train_ind$mouse[[3]]])
y.human.class$spec1 <- list(train = y.human.class$spec1[train_ind$human[[1]]], test = y.human.class$spec1[-train_ind$human[[1]]])
y.human.class$spec2 <- list(train = y.human.class$spec2[train_ind$human[[2]]], test = y.human.class$spec2[-train_ind$human[[2]]])
y.human.class$spec3 <- list(train = y.human.class$spec3[train_ind$human[[3]]], test = y.human.class$spec3[-train_ind$human[[3]]])
y.mouse <- list(spec1 = to_categorical(as.numeric(y.mouse[which(specimen.mouse == "M1")])-1, 11), spec2 = to_categorical(as.numeric(y.mouse[which(specimen.mouse == "M2")])-1, 11), spec3 = to_categorical(as.numeric(y.mouse[which(specimen.mouse == "M3")])-1, 11), full = to_categorical(as.numeric(y.mouse)-1, 11))
y.human <- list(spec1 = to_categorical(as.numeric(y.human[which(specimen.human == "H1")])-1, 11), spec2 = to_categorical(as.numeric(y.human[which(specimen.human == "H2")])-1, 11), spec3 = to_categorical(as.numeric(y.human[which(specimen.human == "H3")])-1, 11), full = to_categorical(as.numeric(y.human)-1, 11))
y.mouse$spec1 <- list(train = y.mouse$spec1[train_ind$mouse[[1]],], test = y.mouse$spec1[-train_ind$mouse[[1]],])
y.mouse$spec2 <- list(train = y.mouse$spec2[train_ind$mouse[[2]],], test = y.mouse$spec2[-train_ind$mouse[[2]],])
y.mouse$spec3 <- list(train = y.mouse$spec3[train_ind$mouse[[3]],], test = y.mouse$spec3[-train_ind$mouse[[3]],])
y.human$spec1 <- list(train = y.human$spec1[train_ind$human[[1]],], test = y.human$spec1[-train_ind$human[[1]],])
y.human$spec2 <- list(train = y.human$spec2[train_ind$human[[2]],], test = y.human$spec2[-train_ind$human[[2]],])
y.human$spec3 <- list(train = y.human$spec3[train_ind$human[[3]],], test = y.human$spec3[-train_ind$human[[3]],])
save(y.mouse.class, y.human.class, file = "Data/MLClasses.RData")
ml.models <- list(mouse = list(), human = list())
build_model <- function(in_shape) {
model <- keras_model_sequential() %>%
layer_dense(units = 11,
activation = "softmax",
input_shape = in_shape)
model %>% compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = list("accuracy") )
return(model)
}
for (i in 1:3){
ml.models$mouse[[i]] <- build_model(4311)
ml.models$human[[i]] <- build_model(4311)
}
for (i in 1:3){
ml.models$mouse[[i]] %>% fit(x.mouse[[i]]$train, y.mouse[[i]]$train)
ml.models$human[[i]] %>% fit(x.human[[i]]$train, y.human[[i]]$train)
}
#Loading required libraries
library(RSpectra)
#Loading ML softmax outputs and classification estimates
load("Data/MLResults.RData")
#Function to find the hypergraph degree matrix from its incidence matrix
#TODO add pseudoinverse option
get_degree_matrix <- function(inc_mat) {
return(diag(nrow(inc_mat))*apply(inc_mat^2, 1, sum))
}
#Function to find the hyperedge normalised laplacian matrix from a given incidence matrix
get_hyperedge_normalised_laplacian <- function(inc_mat) {
deg_mat <- get_degree_matrix(inc_mat)
diag(deg_mat) <- diag(deg_mat)^-1
return(t(inc_mat)%*%deg_mat%*%inc_mat)
}
#Function to find the non-zero eigenvalues of the normalised laplacian matrix from a given incidence matrix
get_eigenvalues <- function(inc_mat) {
inc_mat <- as.matrix(inc_mat)
lap_mat <- get_hyperedge_normalised_laplacian(inc_mat)
num <- min(dim(inc_mat))
eigen <- eigs_sym(lap_mat, num)
return(eigen$values)
}
#Function to find the spectral distance between two given spectra
get_spectral_distance <- function(ev1, ev2) {
ev1 <- sort(ev1, decreasing = TRUE)
ev2 <- sort(ev2, decreasing = TRUE)
n_1 <- length(ev1)
n_2 <- length(ev2)
if (n_1 > n_2) {
diff <- n_1 - n_2
ev2 <- c(ev2, rep(0, diff))
}
if (n_2 > n_1) {
diff <- n_2 - n_1
ev1 <- c(ev1, rep(0, diff))
}
ev <- sum(abs(ev1 - ev2))
return(ev)
}
#Function to find the spectral distance from the theoretical disconnected hypergraph
get_spectral_distance_disconnected <- function(ev){
return(get_spectral_distance(ev, rep(1, length(ev))))
}
#Creating hypergraph
#All hypergraphs are stored in a list
#If wanting to access the Primal M1H3 hypergraph, this would be found in hypergraphs$mouse_human$primal[[1]][[3]]
hypergraphs <- list(mouse_mouse = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), mouse_human = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), human_mouse = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), human_human = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())))
#Assigning all the hypergraph incidence matrices to the correct position
for (i in 1:3){
for (j in 1:3){
hypergraphs$mouse_mouse$primal[[i]][[j]] <- ml.sftmx$mouse[[i]][[j]]
hypergraphs$mouse_human$primal[[i]][[j]] <- ml.sftmx$mouse_human[[i]][[j]]
hypergraphs$human_mouse$primal[[i]][[j]] <- ml.sftmx$human_mouse[[i]][[j]]
hypergraphs$human_human$primal[[i]][[j]] <- ml.sftmx$human[[i]][[j]]
hypergraphs$mouse_mouse$dual[[i]][[j]] <- t(ml.sftmx$mouse[[i]][[j]])
hypergraphs$mouse_human$dual[[i]][[j]] <- t(ml.sftmx$mouse_human[[i]][[j]])
hypergraphs$human_mouse$dual[[i]][[j]] <- t(ml.sftmx$human_mouse[[i]][[j]])
hypergraphs$human_human$dual[[i]][[j]] <- t(ml.sftmx$human[[i]][[j]])
}
}
#A list to store all of the eigenvalues of the hypergraphs
#Has the same structure for storing eigenvalues as the hypergraphs list
eigenvalues <- list(mouse_mouse = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), mouse_human = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), human_mouse = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())), human_human = list(primal = list(list(), list(), list()), dual = list(list(), list(), list())))
#Assigining all eigenvalues to the correct position
for (i in 1:3){
for (j in 1:3){
eigenvalues$mouse_mouse$primal[[i]][[j]] <- get_eigenvalues(hypergraphs$mouse_mouse$primal[[i]][[j]])
eigenvalues$mouse_human$primal[[i]][[j]] <- get_eigenvalues(hypergraphs$mouse_human$primal[[i]][[j]])
eigenvalues$human_mouse$primal[[i]][[j]] <- get_eigenvalues(hypergraphs$human_mouse$primal[[i]][[j]])
eigenvalues$human_human$primal[[i]][[j]] <- get_eigenvalues(hypergraphs$human_human$primal[[i]][[j]])
eigenvalues$mouse_mouse$dual[[i]][[j]] <- get_eigenvalues(hypergraphs$mouse_mouse$dual[[i]][[j]])
eigenvalues$mouse_human$dual[[i]][[j]] <- get_eigenvalues(hypergraphs$mouse_human$dual[[i]][[j]])
eigenvalues$human_mouse$dual[[i]][[j]] <- get_eigenvalues(hypergraphs$human_mouse$dual[[i]][[j]])
eigenvalues$human_human$dual[[i]][[j]] <- get_eigenvalues(hypergraphs$human_human$dual[[i]][[j]])
}
}
#A list to store all spectral distances
#Primal spectral distances are stored in the primal sublist and duals in the dual
#disconnected stores the spectral distances from the disconnected hypergraph
#If trying to find the primal distance between H1M3 and M2H2 it would be found in
#spectral_distances$primal$hm$mh[[1]][[3]][[2]][[2]]
spectral_distances <- list(primal = list(), dual = list(), disconnected = list())
spectral_distances$primal$mm <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$primal$mh <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$primal$hm <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$primal$hh <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$dual$mm <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$dual$mh <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$dual$hm <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$dual$hh <- list(mm = list(list(),list(),list()), mh = list(list(),list(),list()), hm = list(list(),list(),list()), hh = list(list(),list(),list()))
spectral_distances$disconnected <- list(mm = list(), mh = list(), hm = list(), hh = list())
spectral_distances$disconnected$mm <- list(list(), list(), list())
spectral_distances$disconnected$mh <- list(list(), list(), list())
spectral_distances$disconnected$hm <- list(list(), list(), list())
spectral_distances$disconnected$hh <- list(list(), list(), list())
#Generating and storing all primal and dual spectral distances
for (i in 1:3){
for (ii in 1:3){
spectral_distances$primal$mm$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mm$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mm$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mm$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mm$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mm$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mm$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mm$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mh$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mh$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mh$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$mh$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mh$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mh$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mh$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$mh$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hm$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hm$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hm$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hm$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hm$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hm$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hm$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hm$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hh$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hh$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hh$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$primal$hh$hh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hh$mm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hh$mh[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hh$hm[[i]][[ii]] <- list(list(),list(),list())
spectral_distances$dual$hh$hh[[i]][[ii]] <- list(list(),list(),list())
for (iii in 1:3){
for (iv in 1:3){
spectral_distances$primal$mm$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$primal[[i]][[ii]],eigenvalues$mouse_mouse$primal[[iii]][[iv]])
spectral_distances$primal$mm$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$primal[[i]][[ii]],eigenvalues$mouse_human$primal[[iii]][[iv]])
spectral_distances$primal$mm$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$primal[[i]][[ii]],eigenvalues$human_mouse$primal[[iii]][[iv]])
spectral_distances$primal$mm$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$primal[[i]][[ii]],eigenvalues$human_human$primal[[iii]][[iv]])
spectral_distances$dual$mm$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$dual[[i]][[ii]],eigenvalues$mouse_mouse$dual[[iii]][[iv]])
spectral_distances$dual$mm$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$dual[[i]][[ii]],eigenvalues$mouse_human$dual[[iii]][[iv]])
spectral_distances$dual$mm$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$dual[[i]][[ii]],eigenvalues$human_mouse$dual[[iii]][[iv]])
spectral_distances$dual$mm$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_mouse$dual[[i]][[ii]],eigenvalues$human_human$dual[[iii]][[iv]])
spectral_distances$primal$mh$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$primal[[i]][[ii]],eigenvalues$mouse_mouse$primal[[iii]][[iv]])
spectral_distances$primal$mh$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$primal[[i]][[ii]],eigenvalues$mouse_human$primal[[iii]][[iv]])
spectral_distances$primal$mh$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$primal[[i]][[ii]],eigenvalues$human_mouse$primal[[iii]][[iv]])
spectral_distances$primal$mh$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$primal[[i]][[ii]],eigenvalues$human_human$primal[[iii]][[iv]])
spectral_distances$dual$mh$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$dual[[i]][[ii]],eigenvalues$mouse_mouse$dual[[iii]][[iv]])
spectral_distances$dual$mh$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$dual[[i]][[ii]],eigenvalues$mouse_human$dual[[iii]][[iv]])
spectral_distances$dual$mh$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$dual[[i]][[ii]],eigenvalues$human_mouse$dual[[iii]][[iv]])
spectral_distances$dual$mh$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$mouse_human$dual[[i]][[ii]],eigenvalues$human_human$dual[[iii]][[iv]])
spectral_distances$primal$hm$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$primal[[i]][[ii]],eigenvalues$mouse_mouse$primal[[iii]][[iv]])
spectral_distances$primal$hm$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$primal[[i]][[ii]],eigenvalues$mouse_human$primal[[iii]][[iv]])
spectral_distances$primal$hm$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$primal[[i]][[ii]],eigenvalues$human_mouse$primal[[iii]][[iv]])
spectral_distances$primal$hm$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$primal[[i]][[ii]],eigenvalues$human_human$primal[[iii]][[iv]])
spectral_distances$dual$hm$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$dual[[i]][[ii]],eigenvalues$mouse_mouse$dual[[iii]][[iv]])
spectral_distances$dual$hm$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$dual[[i]][[ii]],eigenvalues$mouse_human$dual[[iii]][[iv]])
spectral_distances$dual$hm$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$dual[[i]][[ii]],eigenvalues$human_mouse$dual[[iii]][[iv]])
spectral_distances$dual$hm$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_mouse$dual[[i]][[ii]],eigenvalues$human_human$dual[[iii]][[iv]])
spectral_distances$primal$hh$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$primal[[i]][[ii]],eigenvalues$mouse_mouse$primal[[iii]][[iv]])
spectral_distances$primal$hh$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$primal[[i]][[ii]],eigenvalues$mouse_human$primal[[iii]][[iv]])
spectral_distances$primal$hh$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$primal[[i]][[ii]],eigenvalues$human_mouse$primal[[iii]][[iv]])
spectral_distances$primal$hh$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$primal[[i]][[ii]],eigenvalues$human_human$primal[[iii]][[iv]])
spectral_distances$dual$hh$mm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$dual[[i]][[ii]],eigenvalues$mouse_mouse$dual[[iii]][[iv]])
spectral_distances$dual$hh$mh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$dual[[i]][[ii]],eigenvalues$mouse_human$dual[[iii]][[iv]])
spectral_distances$dual$hh$hm[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$dual[[i]][[ii]],eigenvalues$human_mouse$dual[[iii]][[iv]])
spectral_distances$dual$hh$hh[[i]][[ii]][[iii]][[iv]] <- get_spectral_distance(eigenvalues$human_human$dual[[i]][[ii]],eigenvalues$human_human$dual[[iii]][[iv]])
}
}
}
}
#Generating and storing all spectral distances from the disconnected hypergraph
for (i in 1:3){
for (j in 1:3){
spectral_distances$disconnected$mm[[i]][[j]] <- get_spectral_distance_disconnected(eigenvalues$mouse_mouse$dual[[i]][[j]])
spectral_distances$disconnected$mh[[i]][[j]] <- get_spectral_distance_disconnected(eigenvalues$mouse_human$dual[[i]][[j]])
spectral_distances$disconnected$hm[[i]][[j]] <- get_spectral_distance_disconnected(eigenvalues$human_mouse$dual[[i]][[j]])
spectral_distances$disconnected$hh[[i]][[j]] <- get_spectral_distance_disconnected(eigenvalues$human_human$dual[[i]][[j]])
}
}
